import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
mapRadius = 6000
mapDiameter = mapRadius * 2
my_rage = 0

class Reaper:
    type = 0
    throttle = 300
    
class Destroyer:
    type = 1
    throttle = 300
    
class Doof:
    type = 2
    throttle = 300
    
class Tanker:
    type = 3
    throttle = 500
    
class Wreck:
    type = 4

class Tar:
    type = 5
    range = 2000
    radius = 1000
    duration = 3

class Grenade:
    range = 2000
    radius = 1000
    
class Oil:
    type = 6
    range = 2000
    radius = 1000
    duration = 3    

types = [Reaper, Destroyer, Doof, Tanker, Wreck, Tar, Grenade, Oil]
looters = [Reaper, Destroyer, Doof]
    
class Unit:
    def __init__(self, id, type, player, mass, radius, x, y, vx, vy, extra1, extra2):
        self.id = id
        self.type = type
        self.player = player
        self.mass = mass
        self.radius = radius
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.extra1 = extra1
        self.extra2 = extra2
        
    def __repr__(self):
        return '{} of {} is a {} on ({}/{}) with ({}/{})'.format(self.id, self.player, self.type, self.x, self.y, self.vx, self.vy)
    
    def isA(self, type):
        return self.type == type
        
    def isMy(self, type):
        return self.player == 0 and self.type == type

    def areNotMy(self, types):
        return self.player != 0 and self.type in types

def log(message):
    print(message , file=sys.stderr)

def calcDistance(p1, p2):
    return math.sqrt(((p1.x-p2.x)**2)+((p1.y-p2.y)**2))
    
def closest(p1, points):
    closestDist = mapDiameter
    for point in points:
        distance = calcDistance(p1, point)
        if distance < closestDist:
            closestDist = distance
            closestPoint = point
    return closestPoint

def commandReaper(myReaper, wrecks):
    if (len(wrecks) == 0):
        return "WAIT"
        
    closestWreck = closest(myReaper, wrecks)
    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)
    distance = int(calcDistance(myReaper, closestWreck))
    throttle = distance if distance < Reaper.throttle else Reaper.throttle
    return "{} {} {}".format(closestWreck.x, closestWreck.y, throttle)

def commandDestroyer(myDestroyer, myReaper, units):
    if (my_rage >= 60):
        enemyUnits = list(filter(lambda unit: unit.areNotMy(looters), units))
        closestEnemy = closest(myDestroyer, enemyUnits)
        distance = int(calcDistance(myDestroyer, closestEnemy))
        if (distance <= Grenade.range):
            return "SKILL {} {}".format(closestEnemy.x, closestEnemy.y)
    
    tankers = list(filter(lambda unit: unit.isA(Tanker), units))
    if (len(tankers) == 0):
        return "WAIT"
        
    closestTankerToMyReaper = closest(myReaper, tankers)
    distance = int(calcDistance(myDestroyer, closestTankerToMyReaper))
    throttle = distance if distance < Destroyer.throttle else Destroyer.throttle
    return "{} {} {}".format(closestTankerToMyReaper.x, closestTankerToMyReaper.y, throttle)

def commandDoof(myDoof, units):
    if (myDestroyer.x > 0):
        return "{} 0 {}".format(-mapRadius, myDoof.type.throttle)
    else:
        return "{} 0 {}".format(mapRadius, myDoof.type.throttle)

# game loop
while True:
    my_score = int(input())
    enemy_score_1 = int(input())
    enemy_score_2 = int(input())
    my_rage = int(input())
    enemy_rage_1 = int(input())
    enemy_rage_2 = int(input())
    unit_count = int(input())
    units = []
    wrecks = []
    for i in range(unit_count):
        unit_id, unit_type, player, mass, radius, x, y, vx, vy, extra1, extra2 = input().split()
        unit_id = int(unit_id)
        unit_type = types[int(unit_type)]
        player = int(player)
        mass = float(mass)
        radius = int(radius)
        x = int(x)
        y = int(y)
        vx = int(vx)
        vy = int(vy)
        extra1 = int(extra1)
        extra2 = int(extra2)
        
        unit = Unit(unit_id, unit_type, player, mass, radius, x, y, vx, vy, extra1, extra2)
        units.append(unit)
        if (unit.isA(Wreck)):
            wrecks.append(unit)

    myReaper = next(filter(lambda unit: unit.isMy(Reaper), units))
    myDestroyer = next(filter(lambda unit: unit.isMy(Destroyer), units))
    myDoof = next(filter(lambda unit: unit.isMy(Doof), units))
    
    print(commandReaper(myReaper, wrecks))
    print(commandDestroyer(myDestroyer, myReaper, units))
    print(commandDoof(myDoof, units))
