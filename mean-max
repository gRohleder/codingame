import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
mapRadius = 6000
mapDiameter = mapRadius * 2
reaperThrottle = 300
destroyerThrottle = 300
Reaper = 0
Destroyer = 1
Tanker = 3
Wreck = 4

class Unit:
    def __init__(self, id, type, player, mass, radius, x, y, vx, vy, extra1, extra2):
        self.id = id
        self.type = type
        self.player = player
        self.mass = mass
        self.radius = radius
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.extra1 = extra1
        self.extra2 = extra2
        
    def __repr__(self):
        return '{} of {} is a {} on ({}/{})'.format(self.id, self.player, self.type, self.x, self.y)
    
    def isA(self, type):
        return self.type == type
        
    def isMy(self, type):
        return self.player == 0 and self.type == type
        
def log(message):
    print(message , file=sys.stderr)

def calcDistance(p1, p2):
    return math.sqrt(((p1.x-p2.x)**2)+((p1.y-p2.y)**2))
    
def closest(p1, points):
    closestDist = mapDiameter
    for point in points:
        distance = calcDistance(p1, point)
        if distance < closestDist:
            closestDist = distance
            closestPoint = point
    return closestPoint

def moveReaper(myReaper, wrecks):
    if (len(wrecks) == 0):
        return "WAIT"
        
    closestWreck = closest(myReaper, wrecks)
    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)
    distance = int(calcDistance(myReaper, closestWreck))
    throttle = distance if distance < reaperThrottle else reaperThrottle
    return "{} {} {}".format(closestWreck.x, closestWreck.y, throttle)

def moveDestroyer(myDestroyer, myReaper, tankers):
    if (len(tankers) == 0):
        return "WAIT"
        
    closestTankerToMyReaper = closest(myReaper, tankers)
    log(closestTankerToMyReaper)
    distance = int(calcDistance(myDestroyer, closestTankerToMyReaper))
    throttle = distance if distance < destroyerThrottle else destroyerThrottle
    return "{} {} {}".format(closestTankerToMyReaper.x, closestTankerToMyReaper.y, throttle)
    
# game loop
while True:
    my_score = int(input())
    enemy_score_1 = int(input())
    enemy_score_2 = int(input())
    my_rage = int(input())
    enemy_rage_1 = int(input())
    enemy_rage_2 = int(input())
    unit_count = int(input())
    units = []
    wrecks = []
    tankers = []
    for i in range(unit_count):
        unit_id, unit_type, player, mass, radius, x, y, vx, vy, extra1, extra2 = input().split()
        unit_id = int(unit_id)
        unit_type = int(unit_type)
        player = int(player)
        mass = float(mass)
        radius = int(radius)
        x = int(x)
        y = int(y)
        vx = int(vx)
        vy = int(vy)
        extra1 = int(extra1)
        extra2 = int(extra2)
        
        unit = Unit(unit_id, unit_type, player, mass, radius, x, y, vx, vy, extra1, extra2)
        units.append(unit)
        if (unit.isA(Wreck)):
            wrecks.append(unit)
        elif (unit.isA(Tanker)):
            tankers.append(unit)

    myReaper = next(filter(lambda unit: unit.isMy(Reaper), units))
    myDestroyer = next(filter(lambda unit: unit.isMy(Destroyer), units))
    
    print(moveReaper(myReaper, wrecks))
    print(moveDestroyer(myDestroyer, myReaper, tankers))
    print("WAIT")
